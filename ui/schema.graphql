# source: http://localhost:10000/api/labbook/
# timestamp: Tue Jul 09 2019 14:48:04 GMT-0400 (Eastern Daylight Time)

schema {
  query: LabbookQuery
  mutation: LabbookMutations
}

"""Enumeration representing the modifiers on Activity Detail Records"""
enum ActivityAction {
  NOACTION
  CREATE
  EDIT
  DELETE
  EXECUTE
}

"""A Connection for paging through activity recrods"""
type ActivityConnection {
  pageInfo: PageInfo!
  edges: [ActivityEdge]!
}

"""Container for Activity Detail Records"""
type ActivityDetailObject implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  key: String!
  data: [[String]]
  type: ActivityDetailType
  action: ActivityAction
  show: Boolean
  importance: Int
  tags: [String]
}

"""Enumeration representing the type of Activity Detail Record"""
enum ActivityDetailType {
  DATASET
  NOTE
  LABBOOK
  INPUT_DATA
  CODE
  CODE_EXECUTED
  RESULT
  OUTPUT_DATA
  ENVIRONMENT
}

type ActivityEdge {
  """The item at the end of the edge"""
  node: ActivityRecordObject

  """A cursor for use in pagination"""
  cursor: String!
}

"""Container for Activity Records"""
type ActivityRecordObject implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  commit: String!
  linkedCommit: String
  message: String
  detailObjects: [ActivityDetailObject]
  type: ActivityType
  show: Boolean
  importance: Int
  tags: [String]
  timestamp: DateTime
  username: String
  email: String
}

"""Enumeration representing the type of Activity Record"""
enum ActivityType {
  NOTE
  ENVIRONMENT
  CODE
  INPUT_DATA
  OUTPUT_DATA
  MILESTONE
  BRANCH
  LABBOOK
  DATASET
}

input AddCustomDockerInput {
  owner: String!
  labbookName: String!
  dockerContent: String!
  clientMutationId: String
}

type AddCustomDockerPayload {
  updatedEnvironment: Environment
  clientMutationId: String
}

input AddDatasetCollaboratorInput {
  owner: String!
  datasetName: String!
  username: String!
  permissions: String!
  clientMutationId: String
}

type AddDatasetCollaboratorPayload {
  updatedDataset: Dataset
  clientMutationId: String
}

input AddDatasetFileInput {
  owner: String!
  datasetName: String!
  filePath: String!
  chunkUploadParams: ChunkUploadInput!
  transactionId: String!
  clientMutationId: String
}

"""
Mutation to add a file to a labbook. File should be sent in the
`uploadFile` key as a multi-part/form upload.
file_path is the relative path in the dataset.
"""
type AddDatasetFilePayload {
  newDatasetFileEdge: DatasetFileEdge
  clientMutationId: String
}

input AddLabbookCollaboratorInput {
  owner: String!
  labbookName: String!
  username: String!
  permissions: String!
  clientMutationId: String
}

type AddLabbookCollaboratorPayload {
  updatedLabbook: Labbook
  clientMutationId: String
}

input AddLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  filePath: String!
  chunkUploadParams: ChunkUploadInput!
  transactionId: String!
  clientMutationId: String
}

"""
Mutation to add a file to a labbook. File should be sent in the
`uploadFile` key as a multi-part/form upload.
file_path is the relative path from the labbook section specified.
"""
type AddLabbookFilePayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

input AddLabbookRemoteInput {
  owner: String!
  labbookName: String!
  remoteName: String!
  remoteUrl: String!
  clientMutationId: String
}

type AddLabbookRemotePayload {
  success: Boolean
  clientMutationId: String
}

input AddPackageComponentsInput {
  owner: String!
  labbookName: String!
  packages: [PackageComponentInput]
  clientMutationId: String
}

"""
Mutation to add or update packages to labbook

You MUST have previously validated the package information or errors can occur at build time.
You MUST include a version, since auto-addition of a package version is done during validation.
"""
type AddPackageComponentsPayload {
  newPackageComponentEdges: [PackageComponentEdge]
  clientMutationId: String
}

"""A type that represents a Base Image Environment Component"""
type AppHealthMonitor implements Node {
  """The ID of the object."""
  id: ID!
  diskAvailableGb: Float
  diskTotalGb: Float
  diskUseWarning: Boolean
}

"""A type that represents a Base Image Environment Component"""
type BaseComponent implements Node {
  """The ID of the object."""
  id: ID!
  schema: Int
  repository: String!
  componentId: String!
  revision: Int!
  name: String
  description: String
  readme: String
  tags: [String]
  icon: String
  osClass: String
  osRelease: String
  license: String
  url: String
  languages: [String]
  developmentTools: [String]
  packageManagers: [String]
  installedPackages: [String]
  dockerImageServer: String
  dockerImageNamespace: String
  dockerImageRepository: String
  dockerImageTag: String
  cudaVersion: String
}

"""A Connection for paging through Base components"""
type BaseComponentConnection {
  pageInfo: PageInfo!
  edges: [BaseComponentEdge]!
}

type BaseComponentEdge {
  """The item at the end of the edge"""
  node: BaseComponent

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a branch in the repo """
type Branch implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  branchName: String!
  isActive: Boolean
  isLocal: Boolean
  isRemote: Boolean
  isMergeable: Boolean
  commitsBehind: Int
  commitsAhead: Int
}

input BuildImageInput {
  owner: String!
  labbookName: String!
  noCache: Boolean
  clientMutationId: String
}

"""Mutator to build a LabBook's Docker Image"""
type BuildImagePayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

"""Represents a bundled application """
type BundledApp implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!

  """Name of the bundled app"""
  appName: String!

  """Description of the bundled app"""
  description: String

  """Port on which the bundled app is exposed internally"""
  port: Int

  """Command to run to start the bundled app"""
  command: String
}

input CancelBuildInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type CancelBuildPayload {
  buildStopped: Boolean
  message: String
  clientMutationId: String
}

input ChangeLabbookBaseInput {
  owner: String!
  labbookName: String!
  repository: String!
  baseId: String!
  revision: Int!
  clientMutationId: String
}

type ChangeLabbookBasePayload {
  labbook: Labbook
  clientMutationId: String
}

"""
Input Object for params needed for a chunked upload

To use, add a field `chunk_upload_params` to your mutation input
"""
input ChunkUploadInput {
  fileSizeKb: Int!
  chunkSize: Int!
  totalChunks: Int!
  chunkIndex: Int!
  filename: String!
  uploadId: String!
}

type Collaborator implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  collaboratorUsername: String!
  permission: String!
}

input CompleteBatchUploadTransactionInput {
  owner: String!
  labbookName: String!
  transactionId: String!
  cancel: Boolean
  rollback: Boolean
  clientMutationId: String
}

type CompleteBatchUploadTransactionPayload {
  success: Boolean
  clientMutationId: String
}

input CompleteDatasetUploadTransactionInput {
  owner: String!
  datasetName: String!
  transactionId: String!
  cancel: Boolean
  rollback: Boolean
  clientMutationId: String
}

type CompleteDatasetUploadTransactionPayload {
  backgroundJobKey: String
  clientMutationId: String
}

input ConfigureDatasetInput {
  """Owner of the dataset to configure"""
  datasetOwner: String!

  """Name of the dataset to configure"""
  datasetName: String!
  parameters: [DatasetConfigurationParameterInput]

  """
  Set to true so confirm the configuration and continue. False will clear the configuration to start over
  """
  confirm: Boolean
  clientMutationId: String
}

"""
Mutation to configure a dataset backend if needed.

Workflow to configure a dataset:
- TODO
"""
type ConfigureDatasetPayload {
  dataset: Dataset

  """If true, all parameters a set and OK to continue"""
  isConfigured: Boolean

  """
  If true, should confirm configuration with the user and resubmit with confirm=True to finalize
  """
  shouldConfirm: Boolean

  """Configuration error message to display to the user"""
  errorMessage: String

  """Confirmation message to display to the user"""
  confirmMessage: String

  """
  If true, this backend type requires background work after confirmation. Check
  complete_background_key for key to provide user feedback.
  """
  hasBackgroundJob: Boolean

  """Background job key to query on for feedback if needed"""
  backgroundJobKey: String
  clientMutationId: String
}

"""An enumeration for container image status"""
enum ContainerStatus {
  NOT_RUNNING
  STARTING
  RUNNING
}

input CreateDatasetInput {
  name: String!
  description: String!
  storageType: String!
  clientMutationId: String
}

"""Mutation for creation of a new Dataset on disk"""
type CreateDatasetPayload {
  dataset: Dataset
  clientMutationId: String
}

input CreateExperimentalBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  revision: String
  description: String
  clientMutationId: String
}

"""Mutation to create a local experimental (or Rollback) branch. """
type CreateExperimentalBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

input CreateLabbookInput {
  name: String!
  description: String!
  repository: String!
  baseId: String!
  revision: Int!
  isUntracked: Boolean
  clientMutationId: String
}

"""Mutation for creation of a new Labbook on disk"""
type CreateLabbookPayload {
  labbook: Labbook
  clientMutationId: String
}

input CreateUserNoteInput {
  owner: String!
  labbookName: String
  datasetName: String
  title: String!
  body: String
  tags: [String]
  clientMutationId: String
}

"""
Mutation to create a new user note entry in the activity feed of lab book

The `linked_commit` is an empty string since there is no linked commit
"""
type CreateUserNotePayload {
  newActivityRecordEdge: ActivityEdge
  clientMutationId: String
}

"""
A type representing a Dataset and all of its contents

Datasets are uniquely identified by both the "owner" and the "name" of the Dataset
"""
type Dataset implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  description: String
  datasetType: DatasetType
  schemaVersion: Int
  createdOnUtc: DateTime
  collaborators: [Collaborator]
  canManageCollaborators: Boolean
  modifiedOnUtc: DateTime
  activityRecords(before: String, after: String, first: Int, last: Int): ActivityConnection
  allFiles(before: String, after: String, first: Int, last: Int): DatasetFileConnection
  detailRecord(key: String): ActivityDetailObject
  detailRecords(keys: [String]): [ActivityDetailObject]
  visibility: String
  defaultRemote: String
  overview: DatasetOverview
  backendIsConfigured: Boolean
  backendConfiguration: [DatasetConfigurationParameter]
  contentHashMismatches: [String]
  commitsBehind: Int
}

"""
A simple type that represents a Dataset configuration parameter from a storage backend class
"""
type DatasetConfigurationParameter {
  parameter: String
  description: String
  parameterType: String
  value: String
}

input DatasetConfigurationParameterInput {
  parameter: String!
  parameterType: String!
  value: String!
}

"""A Connection for paging through datasets that exist locally. """
type DatasetConnection {
  pageInfo: PageInfo!
  edges: [DatasetEdge]!
}

type DatasetEdge {
  """The item at the end of the edge"""
  node: Dataset

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a file or directory inside the dataset file system.
"""
type DatasetFile implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  key: String!
  isDir: Boolean
  isLocal: Boolean
  modifiedAt: Float
  size: String
}

"""A connection for paging through labbook files. """
type DatasetFileConnection {
  pageInfo: PageInfo!
  edges: [DatasetFileEdge]!
}

type DatasetFileEdge {
  """The item at the end of the edge"""
  node: DatasetFile

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type simply used as a container to group local and remote Datasets for better relay support

Dataset and RemoteDataset objects are uniquely identified by both the "owner" and the "name" of the Dataset

NOTE: RemoteDatasets require all fields to be explicitly set as there is no current way to asynchronously retrieve
      the data
"""
type DatasetList implements Node {
  """The ID of the object."""
  id: ID!
  localById(ids: [String]): [Dataset]
  localDatasets(orderBy: String = "name", sort: String = "asc", before: String, after: String, first: Int, last: Int): DatasetConnection
  remoteDatasets(orderBy: String = "name", sort: String = "asc", before: String, after: String, first: Int, last: Int): RemoteDatasetConnection
}

"""
A type representing the overview of a Dataset
    
"""
type DatasetOverview implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  numFiles: Int
  totalBytes: String
  localBytes: String
  fileTypeDistribution: [String]
  readme: String
}

"""A type that represents a type of Dataset that can be created"""
type DatasetType implements Node {
  """The ID of the object."""
  id: ID!
  name: String
  storageType: String
  isManaged: Boolean
  canUpdateUnmanagedFromRemote: Boolean
  description: String
  readme: String
  tags: [String]
  icon: String
  url: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteDatasetCollaboratorInput {
  owner: String!
  datasetName: String!
  username: String!
  clientMutationId: String
}

type DeleteDatasetCollaboratorPayload {
  updatedDataset: Dataset
  clientMutationId: String
}

input DeleteDatasetFilesInput {
  datasetOwner: String!
  datasetName: String!
  keys: [String]!
  clientMutationId: String
}

type DeleteDatasetFilesPayload {
  success: Boolean
  clientMutationId: String
}

input DeleteDatasetInput {
  owner: String!
  datasetName: String!
  local: Boolean
  remote: Boolean
  clientMutationId: String
}

"""Delete a dataset."""
type DeleteDatasetPayload {
  localDeleted: Boolean
  remoteDeleted: Boolean
  clientMutationId: String
}

input DeleteExperimentalBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  deleteLocal: Boolean
  deleteRemote: Boolean
  clientMutationId: String
}

"""Delete a feature/rollback branch. Fails for any other attempt."""
type DeleteExperimentalBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

input DeleteLabbookCollaboratorInput {
  owner: String!
  labbookName: String!
  username: String!
  clientMutationId: String
}

type DeleteLabbookCollaboratorPayload {
  updatedLabbook: Labbook
  clientMutationId: String
}

input DeleteLabbookFilesInput {
  owner: String!
  labbookName: String!
  section: String!
  filePaths: [String]!
  clientMutationId: String
}

type DeleteLabbookFilesPayload {
  success: Boolean
  clientMutationId: String
}

input DeleteLabbookInput {
  owner: String!
  labbookName: String!
  confirm: Boolean!
  clientMutationId: String
}

"""Delete a labbook from disk. """
type DeleteLabbookPayload {
  success: Boolean
  clientMutationId: String
}

input DeleteRemoteLabbookInput {
  owner: String!
  labbookName: String!
  confirm: Boolean!
  clientMutationId: String
}

"""Delete a labbook from the remote repository."""
type DeleteRemoteLabbookPayload {
  success: Boolean
  clientMutationId: String
}

input DeleteSecretsFileInput {
  owner: String!
  labbookName: String!

  """
  Filename of secrets file to delete from the host - does NOT delete from the registry
  """
  filename: String!
  clientMutationId: String
}

"""
Delete the secrets file on the host, but without removing the
corresponding entry in the registry. 
"""
type DeleteSecretsFilePayload {
  environment: Environment
  clientMutationId: String
}

input DownloadDatasetFilesInput {
  datasetOwner: String!
  datasetName: String!
  labbookOwner: String
  labbookName: String
  allKeys: Boolean
  keys: [String]
  clientMutationId: String
}

type DownloadDatasetFilesPayload {
  backgroundJobKey: String
  clientMutationId: String
}

"""A type that represents the Environment for a LabBook"""
type Environment implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  imageStatus: ImageStatus
  containerStatus: ContainerStatus
  base: BaseComponent
  baseLatestRevision: Int
  packageDependencies(before: String, after: String, first: Int, last: Int): PackageComponentConnection
  dockerSnippet: String
  secretsFileMapping(before: String, after: String, first: Int, last: Int): SecretFileMappingConnection
  bundledApps: [BundledApp]
}

input ExportDatasetInput {
  owner: String!
  datasetName: String!
  clientMutationId: String
}

type ExportDatasetPayload {
  jobKey: String
  clientMutationId: String
}

input ExportLabbookInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type ExportLabbookPayload {
  jobKey: String
  clientMutationId: String
}

input FetchDatasetEdgeInput {
  owner: String!
  datasetName: String!
  clientMutationId: String
}

type FetchDatasetEdgePayload {
  newDatasetEdge: DatasetEdge
  clientMutationId: String
}

input FetchLabbookEdgeInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type FetchLabbookEdgePayload {
  newLabbookEdge: LabbookEdge
  clientMutationId: String
}

"""
An interface for Objects backended with git repositories (LabBook and Datasets)
"""
interface GitRepository {
  owner: String!
  name: String!
}

"""An enumeration for Docker image status"""
enum ImageStatus {
  DOES_NOT_EXIST
  BUILD_IN_PROGRESS
  BUILD_QUEUED
  EXISTS
  STALE
  BUILD_FAILED
}

input ImportDatasetInput {
  chunkUploadParams: ChunkUploadInput!
  clientMutationId: String
}

type ImportDatasetPayload {
  importJobKey: String
  clientMutationId: String
}

input ImportLabbookInput {
  chunkUploadParams: ChunkUploadInput!
  clientMutationId: String
}

type ImportLabbookPayload {
  importJobKey: String
  clientMutationId: String
}

input ImportRemoteDatasetInput {
  owner: String!
  datasetName: String!
  remoteUrl: String!
  clientMutationId: String
}

type ImportRemoteDatasetPayload {
  newDatasetEdge: DatasetEdge
  clientMutationId: String
}

input ImportRemoteLabbookInput {
  owner: String!
  labbookName: String!
  remoteUrl: String!
  clientMutationId: String
}

type ImportRemoteLabbookPayload {
  jobKey: String
  clientMutationId: String
}

input InsertSecretsEntryInput {
  owner: String!
  labbookName: String!

  """Filename (not a full path) of the secrets file."""
  filename: String!

  """Path to directory INSIDE the container"""
  mountPath: String!
  clientMutationId: String
}

"""
Creates an entry in the Project's Secret Store. Note, you will
need to use the Upload mutation to actually put the file content in
the secret store. 
"""
type InsertSecretsEntryPayload {
  environment: Environment
  clientMutationId: String
}

"""
A query to get the status of a background task launched with the Dispatcher
"""
type JobStatus implements Node {
  """The ID of the object."""
  id: ID!
  jobKey: String
  status: String
  jobMetadata: String
  failureMessage: String
  startedAt: String
  finishedAt: String
  result: String
}

"""
A Connection for paging through all background jobs the system is aware of. 
"""
type JobStatusConnection {
  pageInfo: PageInfo!
  edges: [JobStatusEdge]!
}

type JobStatusEdge {
  """The item at the end of the edge"""
  node: JobStatus

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a LabBook and all of its contents

LabBooks are uniquely identified by both the "owner" and the "name" of the LabBook
"""
type Labbook implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  description: String
  schemaVersion: Int
  isDeprecated: Boolean
  shouldMigrate: Boolean
  sizeBytes: String
  activeBranchName: String
  workspaceBranchName: String
  branches: [Branch]
  defaultRemote: String
  creationDateUtc: DateTime
  modifiedOnUtc: DateTime
  collaborators: [Collaborator]
  canManageCollaborators: Boolean
  isRepoClean: Boolean
  environment: Environment
  overview: LabbookOverview
  code: LabbookSection
  input: LabbookSection
  output: LabbookSection
  activityRecords(before: String, after: String, first: Int, last: Int): ActivityConnection
  detailRecord(key: String): ActivityDetailObject
  detailRecords(keys: [String]): [ActivityDetailObject]
  backgroundJobs: [JobStatus]
  checkPackages(packageInput: [PackageComponentInput]): [PackageComponent]
  visibility: String
  linkedDatasets: [Dataset]
}

"""A Connection for paging through labbooks that exist locally. """
type LabbookConnection {
  pageInfo: PageInfo!
  edges: [LabbookEdge]!
}

type LabbookEdge {
  """The item at the end of the edge"""
  node: Labbook

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a file or directory inside the labbook file system.
"""
type LabbookFile implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  section: String!
  key: String!
  isDir: Boolean
  modifiedAt: Float
  size: String
}

"""A connection for paging through labbook files. """
type LabbookFileConnection {
  pageInfo: PageInfo!
  edges: [LabbookFileEdge]!
}

type LabbookFileEdge {
  """The item at the end of the edge"""
  node: LabbookFile

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type simply used as a container to group local and remote LabBooks for better relay support

Labbook and RemoteLabbook objects are uniquely identified by both the "owner" and the "name" of the LabBook

NOTE: RemoteLabbooks require all fields to be explicitly set as there is no current way to asynchronously retrieve
      the data
"""
type LabbookList implements Node {
  """The ID of the object."""
  id: ID!
  localById(ids: [String]): [Labbook]
  localLabbooks(orderBy: String = "name", sort: String = "asc", before: String, after: String, first: Int, last: Int): LabbookConnection
  remoteLabbooks(orderBy: String = "name", sort: String = "asc", before: String, after: String, first: Int, last: Int): RemoteLabbookConnection
}

"""Entry point for all graphql mutations"""
type LabbookMutations {
  insertSecretsEntry(input: InsertSecretsEntryInput!): InsertSecretsEntryPayload
  removeSecretsEntry(input: RemoveSecretsEntryInput!): RemoveSecretsEntryPayload
  uploadSecretsFile(input: UploadSecretsFileInput!): UploadSecretsFilePayload
  deleteSecretsFile(input: DeleteSecretsFileInput!): DeleteSecretsFilePayload
  buildImage(input: BuildImageInput!): BuildImagePayload
  cancelBuild(input: CancelBuildInput!): CancelBuildPayload
  startContainer(input: StartContainerInput!): StartContainerPayload
  stopContainer(input: StopContainerInput!): StopContainerPayload
  startDevTool(input: StartDevToolInput!): StartDevToolPayload
  addPackageComponents(input: AddPackageComponentsInput!): AddPackageComponentsPayload
  removePackageComponents(input: RemovePackageComponentsInput!): RemovePackageComponentsPayload
  addCustomDocker(input: AddCustomDockerInput!): AddCustomDockerPayload
  removeCustomDocker(input: RemoveCustomDockerInput!): RemoveCustomDockerPayload
  changeLabbookBase(input: ChangeLabbookBaseInput!): ChangeLabbookBasePayload
  setBundledApp(input: SetBundledAppInput!): SetBundledAppPayload
  removeBundledApp(input: RemoveBundledAppInput!): RemoveBundledAppPayload
  importLabbook(input: ImportLabbookInput!): ImportLabbookPayload
  exportLabbook(input: ExportLabbookInput!): ExportLabbookPayload
  importRemoteLabbook(input: ImportRemoteLabbookInput!): ImportRemoteLabbookPayload
  deleteRemoteLabbook(input: DeleteRemoteLabbookInput!): DeleteRemoteLabbookPayload
  syncLabbook(input: SyncLabbookInput!): SyncLabbookPayload
  publishLabbook(input: PublishLabbookInput!): PublishLabbookPayload
  setVisibility(input: SetVisibilityInput!): SetVisibilityPayload
  addLabbookRemote(input: AddLabbookRemoteInput!): AddLabbookRemotePayload
  addCollaborator(input: AddLabbookCollaboratorInput!): AddLabbookCollaboratorPayload
  deleteCollaborator(input: DeleteLabbookCollaboratorInput!): DeleteLabbookCollaboratorPayload
  migrateLabbookSchema(input: MigrateLabbookSchemaInput!): MigrateLabbookSchemaPayload
  createExperimentalBranch(input: CreateExperimentalBranchInput!): CreateExperimentalBranchPayload
  deleteExperimentalBranch(input: DeleteExperimentalBranchInput!): DeleteExperimentalBranchPayload
  mergeFromBranch(input: MergeFromBranchInput!): MergeFromBranchPayload
  workonExperimentalBranch(input: WorkonBranchInput!): WorkonBranchPayload
  importRemoteDataset(input: ImportRemoteDatasetInput!): ImportRemoteDatasetPayload
  importDataset(input: ImportDatasetInput!): ImportDatasetPayload
  exportDataset(input: ExportDatasetInput!): ExportDatasetPayload
  createLabbook(input: CreateLabbookInput!): CreateLabbookPayload
  deleteLabbook(input: DeleteLabbookInput!): DeleteLabbookPayload
  setLabbookDescription(input: SetLabbookDescriptionInput!): SetLabbookDescriptionPayload
  publishDataset(input: PublishDatasetInput!): PublishDatasetPayload
  resetBranchToRemote(input: ResetBranchToRemoteInput!): ResetBranchToRemotePayload
  createUserNote(input: CreateUserNoteInput!): CreateUserNotePayload
  addLabbookFile(input: AddLabbookFileInput!): AddLabbookFilePayload
  completeBatchUploadTransaction(input: CompleteBatchUploadTransactionInput!): CompleteBatchUploadTransactionPayload
  moveLabbookFile(input: MoveLabbookFileInput!): MoveLabbookFilePayload
  deleteLabbookFiles(input: DeleteLabbookFilesInput!): DeleteLabbookFilesPayload
  makeLabbookDirectory(input: MakeLabbookDirectoryInput!): MakeLabbookDirectoryPayload
  removeUserIdentity(input: RemoveUserIdentityInput!): RemoveUserIdentityPayload
  addDatasetCollaborator(input: AddDatasetCollaboratorInput!): AddDatasetCollaboratorPayload
  deleteDatasetCollaborator(input: DeleteDatasetCollaboratorInput!): DeleteDatasetCollaboratorPayload
  writeLabbookReadme(input: WriteLabbookReadmeInput!): WriteLabbookReadmePayload
  fetchLabbookEdge(input: FetchLabbookEdgeInput!): FetchLabbookEdgePayload
  createDataset(input: CreateDatasetInput!): CreateDatasetPayload
  configureDataset(input: ConfigureDatasetInput!): ConfigureDatasetPayload
  updateUnmanagedDataset(input: UpdateUnmanagedDatasetInput!): UpdateUnmanagedDatasetPayload
  verifyDataset(input: VerifyDatasetInput!): VerifyDatasetPayload
  deleteDataset(input: DeleteDatasetInput!): DeleteDatasetPayload
  addDatasetFile(input: AddDatasetFileInput!): AddDatasetFilePayload
  completeDatasetUploadTransaction(input: CompleteDatasetUploadTransactionInput!): CompleteDatasetUploadTransactionPayload
  fetchDatasetEdge(input: FetchDatasetEdgeInput!): FetchDatasetEdgePayload
  setDatasetVisibility(input: SetDatasetVisibilityInput!): SetDatasetVisibilityPayload
  syncDataset(input: SyncDatasetInput!): SyncDatasetPayload
  downloadDatasetFiles(input: DownloadDatasetFilesInput!): DownloadDatasetFilesPayload
  modifyDatasetLink(input: ModifyDatasetLinkInput!): ModifyDatasetLinkPayload
  deleteDatasetFiles(input: DeleteDatasetFilesInput!): DeleteDatasetFilesPayload
  moveDatasetFile(input: MoveDatasetFileInput!): MoveDatasetFilePayload
  makeDatasetDirectory(input: MakeDatasetDirectoryInput!): MakeDatasetDirectoryPayload
  writeDatasetReadme(input: WriteDatasetReadmeInput!): WriteDatasetReadmePayload
  setDatasetDescription(input: SetDatasetDescriptionInput!): SetDatasetDescriptionPayload
}

"""
A type representing the overview of a LabBook

It contains counts for all package managers, the last 3 activity records with show=True
"""
type LabbookOverview implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  numAptPackages: Int
  numConda2Packages: Int
  numConda3Packages: Int
  numPipPackages: Int
  numCustomDependencies: Int
  recentActivity: ActivityRecordObject
  readme: String
}

"""Entry point for all LabBook queryable fields"""
type LabbookQuery {
  buildInfo: String
  cudaAvailable: Boolean
  currentLabbookSchemaVersion: Int
  jobStatus(jobId: String): JobStatus
  backgroundJobs(before: String, after: String, first: Int, last: Int): JobStatusConnection
  userIdentity: UserIdentity
  appHealth: AppHealthMonitor

  """The ID of the object"""
  node(id: ID!): Node
  nodes(ids: [String]): [Node]
  labbook(owner: String, name: String): Labbook
  dataset(owner: String, name: String): Dataset
  labbookList: LabbookList
  datasetList: DatasetList
  availableBases(before: String, after: String, first: Int, last: Int): BaseComponentConnection
  availableDatasetTypes: [DatasetType]
  repositoryNameIsAvailable(name: String): Boolean
}

"""
A type representing a section within a LabBook (i.e., code, input, output)
    
"""
type LabbookSection implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  section: String
  files(rootDir: String, before: String, after: String, first: Int, last: Int): LabbookFileConnection
  allFiles(before: String, after: String, first: Int, last: Int): LabbookFileConnection
  hasFiles: Boolean
}

input MakeDatasetDirectoryInput {
  datasetOwner: String!
  datasetName: String!
  key: String!
  clientMutationId: String
}

type MakeDatasetDirectoryPayload {
  newDatasetFileEdge: DatasetFileEdge
  clientMutationId: String
}

input MakeLabbookDirectoryInput {
  owner: String!
  labbookName: String!
  section: String!
  directory: String!
  clientMutationId: String
}

type MakeLabbookDirectoryPayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

input MergeFromBranchInput {
  owner: String!
  labbookName: String!
  otherBranchName: String!
  overrideMethod: String
  clientMutationId: String
}

"""
Merge from another branch into the current active branch. Force if necessary. 
"""
type MergeFromBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

input MigrateLabbookSchemaInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type MigrateLabbookSchemaPayload {
  labbook: Labbook
  clientMutationId: String
}

input ModifyDatasetLinkInput {
  """Owner of the labbook"""
  labbookOwner: String!

  """Name of the labbook"""
  labbookName: String!

  """Owner of the dataset to link"""
  datasetOwner: String!

  """Name of the dataset to link"""
  datasetName: String!

  """Action to perform, either `link`, `unlink`, or `update`"""
  action: String!

  """URL to the Dataset to link. Only required when `action=link`"""
  datasetUrl: String
  clientMutationId: String
}

""""Mutation to link and unlink Datasets from a Project"""
type ModifyDatasetLinkPayload {
  newLabbookEdge: LabbookEdge
  clientMutationId: String
}

input MoveDatasetFileInput {
  datasetOwner: String!
  datasetName: String!
  srcPath: String!
  dstPath: String!
  clientMutationId: String
}

type MoveDatasetFilePayload {
  updatedEdges: [DatasetFileEdge]
  clientMutationId: String
}

input MoveLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  srcPath: String!
  dstPath: String!
  clientMutationId: String
}

"""
Method to move/rename a file or directory. If file, both src_path and dst_path should contain the file name.
If a directory, be sure to include the trailing slash
"""
type MoveLabbookFilePayload {
  updatedEdges: [LabbookFileEdge]
  clientMutationId: String
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""A type that represents a Package Manager based Environment Component"""
type PackageComponent implements Node {
  """The ID of the object."""
  id: ID!
  schema: Int
  manager: String!
  package: String!
  version: String
  latestVersion: String
  description: String
  docsUrl: String
  fromBase: Boolean
  isValid: Boolean
}

"""A Connection for paging through Package components"""
type PackageComponentConnection {
  pageInfo: PageInfo!
  edges: [PackageComponentEdge]!
}

type PackageComponentEdge {
  """The item at the end of the edge"""
  node: PackageComponent

  """A cursor for use in pagination"""
  cursor: String!
}

"""An input type to support Batch interfaces that use Package Components"""
input PackageComponentInput {
  manager: String!
  package: String!
  version: String
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PublishDatasetInput {
  owner: String!
  datasetName: String!
  setPublic: Boolean
  clientMutationId: String
}

type PublishDatasetPayload {
  jobKey: String
  clientMutationId: String
}

input PublishLabbookInput {
  owner: String!
  labbookName: String!
  setPublic: Boolean
  clientMutationId: String
}

type PublishLabbookPayload {
  jobKey: String
  clientMutationId: String
}

"""
A type representing a Dataset stored on a remote server

RemoteDatasets are uniquely identified by both the "owner" and the "name" of the Dataset

NOTE: RemoteDatasets require all fields to be explicitly set as there is no current way to asynchronously retrieve
      the data
"""
type RemoteDataset implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  description: String
  visibility: String
  creationDateUtc: String
  modifiedDateUtc: String
  isLocal: Boolean
}

"""
A Connection for paging through remote datasets.

This is a remote call, so should be fetched on its own and only when needed. The user must have a valid
session for data to be returned.

Supported sorting modes:
    - az: naturally sort
    - created_on: sort by creation date, newest first
    - modified_on: sort by modification date, newest first
"""
type RemoteDatasetConnection {
  pageInfo: PageInfo!
  edges: [RemoteDatasetEdge]!
}

type RemoteDatasetEdge {
  """The item at the end of the edge"""
  node: RemoteDataset

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a LabBook stored on a remote server

RemoteLabbooks are uniquely identified by both the "owner" and the "name" of the LabBook

NOTE: RemoteLabbooks require all fields to be explicitly set as there is no current way to asynchronously retrieve
      the data
"""
type RemoteLabbook implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  description: String
  visibility: String
  creationDateUtc: String
  modifiedDateUtc: String
  isLocal: Boolean
}

"""
A Connection for paging through remote labbooks.

This is a remote call, so should be fetched on its own and only when needed. The user must have a valid
session for data to be returned.

Supported sorting modes:
    - az: naturally sort
    - created_on: sort by creation date, newest first
    - modified_on: sort by modification date, newest first
"""
type RemoteLabbookConnection {
  pageInfo: PageInfo!
  edges: [RemoteLabbookEdge]!
}

type RemoteLabbookEdge {
  """The item at the end of the edge"""
  node: RemoteLabbook

  """A cursor for use in pagination"""
  cursor: String!
}

input RemoveBundledAppInput {
  """Owner of the labbook"""
  owner: String!

  """Name of the labbook"""
  labbookName: String!

  """Name of the bundled app"""
  appName: String!
  clientMutationId: String
}

"""Mutation to remove a bundled app from a container"""
type RemoveBundledAppPayload {
  environment: Environment
  clientMutationId: String
}

input RemoveCustomDockerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type RemoveCustomDockerPayload {
  updatedEnvironment: Environment
  clientMutationId: String
}

input RemovePackageComponentsInput {
  owner: String!
  labbookName: String!
  manager: String!
  packages: [String]!
  clientMutationId: String
}

"""Mutation to remove packages from labbook"""
type RemovePackageComponentsPayload {
  success: Boolean
  clientMutationId: String
}

input RemoveSecretsEntryInput {
  owner: String!
  labbookName: String!

  """Filename of secret to remove from the registry"""
  filename: String!
  clientMutationId: String
}

"""
Removes the entry from the Project's SecretStore. Will also remove
any associated files. This undoes the InsertSecretsEntry mutation. 
"""
type RemoveSecretsEntryPayload {
  environment: Environment
  clientMutationId: String
}

input RemoveUserIdentityInput {
  clientMutationId: String
}

"""
Mutation to remove a locally stored user identity (no-op if not running in local mode)
"""
type RemoveUserIdentityPayload {
  userIdentityEdge: UserIdentity
  clientMutationId: String
}

input ResetBranchToRemoteInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

"""
Undo all local history and then set current branch tip to match remote.

Very useful when changes are made to master that cannot be pushed. 
"""
type ResetBranchToRemotePayload {
  labbook: Labbook
  clientMutationId: String
}

"""
Represents a secret vault - i.e., a directory that contains secret key files. 
"""
type SecretFileMapping implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  filename: String
  mountPath: String
  isPresent: Boolean
}

"""Paging through a Project's Secrets Mapping"""
type SecretFileMappingConnection {
  pageInfo: PageInfo!
  edges: [SecretFileMappingEdge]!
}

type SecretFileMappingEdge {
  """The item at the end of the edge"""
  node: SecretFileMapping

  """A cursor for use in pagination"""
  cursor: String!
}

input SetBundledAppInput {
  """Owner of the labbook"""
  owner: String!

  """Name of the labbook"""
  labbookName: String!

  """Name of the bundled app"""
  appName: String!

  """Description of the bundled app"""
  description: String!

  """Port internally exposed"""
  port: Int!

  """Optional command run to start the bundled app if needed"""
  command: String
  clientMutationId: String
}

"""
Mutation to add or update a bundled app configuration to a project
    
"""
type SetBundledAppPayload {
  environment: Environment
  clientMutationId: String
}

input SetDatasetDescriptionInput {
  owner: String!
  datasetName: String!
  description: String!
  clientMutationId: String
}

type SetDatasetDescriptionPayload {
  updatedDataset: Dataset
  clientMutationId: String
}

input SetDatasetVisibilityInput {
  owner: String!
  datasetName: String!
  visibility: String!
  clientMutationId: String
}

type SetDatasetVisibilityPayload {
  newDatasetEdge: DatasetEdge
  clientMutationId: String
}

input SetLabbookDescriptionInput {
  owner: String!
  labbookName: String!
  descriptionContent: String!
  clientMutationId: String
}

type SetLabbookDescriptionPayload {
  success: Boolean
  clientMutationId: String
}

input SetVisibilityInput {
  owner: String!
  labbookName: String!
  visibility: String!
  clientMutationId: String
}

type SetVisibilityPayload {
  newLabbookEdge: LabbookEdge
  clientMutationId: String
}

input StartContainerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

"""Mutator to start a LabBook's Docker Image in a container"""
type StartContainerPayload {
  environment: Environment
  clientMutationId: String
}

input StartDevToolInput {
  owner: String!
  labbookName: String!
  devTool: String!
  containerOverrideId: String
  clientMutationId: String
}

type StartDevToolPayload {
  path: String
  clientMutationId: String
}

input StopContainerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

"""Mutation to stop a Docker container. """
type StopContainerPayload {
  environment: Environment
  clientMutationId: String
}

input SyncDatasetInput {
  owner: String!
  datasetName: String!
  pullOnly: Boolean
  overrideMethod: String
  clientMutationId: String
}

type SyncDatasetPayload {
  jobKey: String
  clientMutationId: String
}

input SyncLabbookInput {
  owner: String!
  labbookName: String!
  pullOnly: Boolean
  overrideMethod: String
  clientMutationId: String
}

type SyncLabbookPayload {
  jobKey: String
  clientMutationId: String
}

input UpdateUnmanagedDatasetInput {
  """Owner of the dataset to configure"""
  datasetOwner: String!

  """Name of the dataset to configure"""
  datasetName: String!

  """If true, update the dataset based on local state of the dataset"""
  fromLocal: Boolean

  """
  If true, update the dataset based on remote state of the dataset. This
  effectivelly also updates the local state, so the `fromLocal` argument is ignored
  """
  fromRemote: Boolean
  clientMutationId: String
}

"""
Mutation to update the manifest for a local dataset based on changes either locally or via the remote the
dataset is linked to
"""
type UpdateUnmanagedDatasetPayload {
  dataset: Dataset

  """Background job key to query on for feedback if needed"""
  backgroundJobKey: String
  clientMutationId: String
}

input UploadSecretsFileInput {
  owner: String!
  labbookName: String!
  chunkUploadParams: ChunkUploadInput!
  transactionId: String!
  clientMutationId: String
}

"""
Uploades the actual secrets file pertaining to the given filename in the
SecretStore registry. The InsertSecretsEntry must be called first. 
"""
type UploadSecretsFilePayload {
  environment: Environment
  clientMutationId: String
}

"""Interface representing a user in the system"""
interface User {
  username: String
  email: String
  givenName: String
  familyName: String
}

"""A type representing the identity of the logged in user"""
type UserIdentity implements Node & User {
  """The ID of the object."""
  id: ID!
  username: String
  email: String
  givenName: String
  familyName: String
  isSessionValid: Boolean
}

input VerifyDatasetInput {
  datasetOwner: String!
  datasetName: String!

  """Optional arg if dataset is linked"""
  labbookOwner: String

  """Optional arg if dataset is linked"""
  labbookName: String
  clientMutationId: String
}

"""
Verify the contents of a dataset, returning a job key. The 'modified_keys' value in the metadata indicates
which files have changed, once the job is complete.
"""
type VerifyDatasetPayload {
  backgroundJobKey: String
  clientMutationId: String
}

input WorkonBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  revision: String
  clientMutationId: String
}

"""Work on another branch (perform a git checkout)."""
type WorkonBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

input WriteDatasetReadmeInput {
  owner: String!
  datasetName: String!
  content: String!
  clientMutationId: String
}

type WriteDatasetReadmePayload {
  updatedDataset: Dataset
  clientMutationId: String
}

input WriteLabbookReadmeInput {
  owner: String!
  labbookName: String!
  content: String!
  clientMutationId: String
}

type WriteLabbookReadmePayload {
  updatedLabbook: Labbook
  clientMutationId: String
}
